
"""
SCORPiOs snakemake module to build an exhasutive orthology table between ingroup WGD duplicated
species and one outgroup non-duplicated species.
"""

rule get_gene_families:
    """
    Phylogenetic orthologs between the outgroup and ingroups (duplicated species).
    """
    input: input_trees, config["species_tree"]
    output: orthology_table = OrthoTableStrict,
            genes_without_orthologs = UNCERTAIN,
            phylo_homologs = [paralogs, orthologs]
    shell: """
    python -m scripts.synteny.duplicated_families -t {input[0]} -n {wildcards.outgr}\
    -d {wildcards.wgd} {anc_arg} -s {input[1]} -g {config[genes]}\
    -o {output.orthology_table} -u {output.genes_without_orthologs} -f {config[genes_format]}
    """


rule gene_tree_orthologies:
    """
    Phylogenetic orthologs in all pairs of ingroups.
    """
    input: input_trees,  config["species_tree"]
    output: a=directory(TreesOrthologies+'/{wgd}')
    shell: """
    python -m scripts.trees.orthologs -d {wildcards.wgd} \
    -s {config[species_tree]} -t {input_trees} -o {output.a}\
    {lowcov_arg} {anc_arg}
    """


checkpoint outgroup_chromosomes:
    """
    Creates a file with chromosomes in the outgroup having entries in the orthologytable.
    """
    input: OrthoTableStrict
    output: Chr
    run:
        with open(input[0], 'r') as infile:
            c_outgr = {line.split('\t')[0] for i, line in enumerate(infile) if i != 0}

        with open(output[0], 'w') as outfile:
            for chrom in c_outgr:
                outfile.write(chrom+'\n')

if "optimize_synteny_support_threshold" in config and config["optimize_synteny_support_threshold"] == 'y':

    rule get_scores_ortho:
        input: ot = OrthoTableStrict, po = orthologs, c = Chr, f = paralogs+'_fam'

        output: orthologs+'_scores.pkl'
        shell:"""
        python -m scripts.synteny.missed_orthologies -i {input.ot} -u {input.po} -c {input.c}\
        --optimize -u_opt_fam {input.f}
        """

    rule get_scores_para:
        input: ot = OrthoTableStrict, po = paralogs, c = Chr

        output: s = paralogs+'_scores.pkl', f = paralogs+'_fam'
        shell:"""
        python -m scripts.synteny.missed_orthologies -i {input.ot} -u {input.po} -c {input.c}\
        --optimize -opt_fam {output.f}
        """

    rule syntenic_support_threshold:
        input: o = orthologs+'_scores.pkl', p = paralogs+'_scores.pkl'
        output: Threshold
        shell:"""
        python -m scripts.synteny.f1_score_optimization -i1 {input.o} -i2 {input.p} -out {output}
        """

else:

    rule pass_synt_support_optimization:
        output: touch("threshold.txt")

rule add_families_with_synteny_evidence:
    """
    Updates the orthology table with synteny-supported orthologies.
    """
    input: a=OrthoTableStrict, b=UNCERTAIN, c=Chr, t=Threshold
    output: OrthoTable
    params: no_graph = fam_no_graph.replace("{{outgr}}", "{{wildcards.outgr}}")\
                                   .replace("{{wgd}}","{{wildcards.wgd}}"),
    shell: """
    python -m scripts.synteny.missed_orthologies -i {input.a} -u {input.b} -c {input.c} -o {output}\
    -wgd {wildcards.wgd},{wildcards.outgr} -w {config[windowSize]} -f {params.no_graph} `cat {input.t}`
    """

if int(ITER) > 1:

    rule filter_out_unchanged_regions:
        """
        If run in iterative mode, filter orthologytable entries to regions with an updated synteny
        context compared to previous iteration.
        """
        input: OrthoTable
        output: regions
        params: OrthoTable = OrthoTable.replace("{{wgd}}", "{{wildcards.wgd}}"),
                OrthoTable_prev = OrthoTable_prev.replace("{{wgd}}", "{{wildcards.wgd}}"),
                regions = regions.replace("{{outgr}}", "{{wildcards.outgr}}").replace("{{wgd}}",\
                                          "{{wildcards.wgd}}"),
                Acc_prev = Acc_prev.replace("{{wgd}}", "{{wildcards.wgd}}"),
                no_graph = fam_no_graph.replace("{{outgr}}", "{{wildcards.outgr}}")\
                                       .replace("{{wgd}}","{{wildcards.wgd}}"),
                wgd = lambda wildcards: wildcards.wgd+","+wildcards.outgr,
                combin = incombin.replace("{{wgd}}", "{{wildcards.wgd}}")

        run:
            filter_regions.make_region_file(params.OrthoTable, params.OrthoTable_prev,\
                                            params.Acc_prev, params.regions, config['windowSize'],
                                            params.no_graph, params.wgd, params.combin)
else:

    rule pass_filter:
        """
        If run in iterative mode, filter orthologytable entries to regions with an updated synteny
        context compared to previous iteration.
        """
        input: OrthoTable
        output: regions
        shell: """
        touch {output}
        """

if config["filter_otable_nosynteny"] == 'y':
    rule filter_table:
        input: OrthoTable
        output: OrthoTableF
        params: Chr = Chr.replace("{{outgr}}", "{{wildcards.outgr}}").replace("{{wgd}}",\
                                  "{{wildcards.wgd}}"),
        shell:"""
        python -m scripts.synteny.filter_no_synteny_genes -i {input} -chr {params.Chr}\
        -w {config[windowSize]} -o {output} -wgd {wildcards.wgd},{wildcards.outgr}
        """

else:
    rule pass_ofilter:
        input: OrthoTable
        output: OrthoTableF
        shell:"""
        cp {input} {output}
        """
