#!/usr/bin/env bash

name=$1
alifile=$2
ctree=$3
enstree=$4
output=$5
lktestpoly=$6
outgr=$7 #comma separated list of outgroups
treebtree=$8
Sptree=$9


alidir=${alifile%/*}
dirtreeb=${treebtree%/*}

#check if solution with polytomysolver was accepted
VARIABLE=`python scripts/trees/parse_au_test.py -i $lktestpoly -one y`

#if not, try treebest
if [ "$VARIABLE" = false ]; then

	mkdir -p ${dirtreeb}

	#cut the constrained topology to resolve relations in each orthogroup independently
	python -m scripts.trees.cut_subtrees -og $name -c "$ctree" -a "$alifile" -ot "${dirtreeb}/${name}" -oa "${alidir}/${name}"

	orthog_subtrees=''

	for i in {1..2}
	do
		#if cut_subtrees made a subalignment for orthogroup i, compute its topology with treebest
		if [ -f ${alidir}/${name}_$i.fa ]; then
			>&2 echo "treebest solution computation for: $name, orthogroup $i"
			treebest phyml -n -Z 1e-3 -X 400 -S -f ${Sptree} ${alidir}/${name}_$i.fa > ${dirtreeb}/${name}_$i.nh
			orthog_subtrees+=' '${dirtreeb}/${name}_$i.nh

		#if orthogroup has only two genes, we don't need treebest to build the topology
		#tree was already generated by cut_subtrees
		elif [ -f ${dirtreeb}/${name}_$i.nh ]; then
			orthog_subtrees+=' '${dirtreeb}/${name}_$i.nh
		fi


	done

	#merge the resolved subtrees back together
	python -m scripts.trees.merge_subtrees -t$orthog_subtrees -outgr $name -o $treebtree

	#compute the likelihood test for this treebest solution
	bash scripts/make_lk_test_consel.sh $name $enstree $alifile $treebtree $output

	#clean all temp
	for i in {1..2}
	do
		if [ -f ${AliDir}/${name}_${wgd}_$i.fa ]; then

			rm ${Soldir}/${name}_${i}.nh
			rm ${AliDir}/${name}_${wgd}_$i.fa
		fi

	done


#if polytomysolver was accepted don't try treebest
else
	touch "$output"
	touch "$treebtree"
fi
